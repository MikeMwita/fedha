openapi: 3.0.3
info:
  title: Fedha API
  description: Fedha API
  version: 2023-04-01
  termsOfService: https://usefedha.ke/terms
  contact:
    name: Fedha
    url: https://usefedha.ke
servers:
  - url: 'http://127.0.0.1:4010'
    description: 'Mock server'
  - url: 'http://localhost:9005/v1'
    description: 'Local'
  - url: 'https://staging-api.usefedha.ke/v1'
    description: 'Staging'
  - url: 'https://api.usefedha.ke/v1'
    description: 'Production'
paths:
  /users/{userId}/show:
    summary: this shows a single user
    description: single user
    get:
      security: []
      summary: A GET request to /users/{userId}
      operationId: getUserById
      description: get user by id
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: string
            example: dlfhlds-sdkfbkjsdbf-sdkfbjk
      responses:
        '200':
          description: user object response
          content:
            application/json:
              schema:
                type: object
                description: user object
                properties:
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: john.doe@example.com
        default:
          description: error
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  error:
                    type: string
  /auth/login:
    summary: Login with user credentials
    description: User login
    post:
      summary: A POST request to login with user credentials
      operationId: login
      tags:
        - Login
      description: login post
      requestBody:
        description: login request object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseData"
        "400":
          description: Default error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"



  /auth/register:
    summary: Register new users to the system
    description: User account registration
    post:
      summary: A POST request to registering new users
      operationId: register
      tags:
        - Register
      description: register post
      requestBody:
        description: registration request object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"

      responses:
        "200":
          description: successfully registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponseData"
        "400":
          description: Default error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"


  /api/v1/token/refresh:
    summary: Refresh access token
    description: Endpoint to refresh the access token.
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags:
        - Auth
      description: Refresh the access token for an authenticated user.
      requestBody:
        description: Refresh token request object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        '200':
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /api/v1/logout:
    summary: Logout user
    description: Endpoint to log out an authenticated user.
    delete:
      summary: Logout user
      operationId: userLogout
      tags:
        - Auth
      description: Logout the authenticated user by invalidating their access token.
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  error:
                    type: string

  /api/v1/expense_type:
    summary: Create a new expense type
    description: Endpoint to create a new expense type.
    post:
      summary: Create a new expense type
      operationId: createExpenseType
      tags:
        - App
      description: Create a new expense type with the provided details.
      requestBody:
        description: Expense type creation request object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExpenseTypeRequest"
      responses:
        '200':
          description: Expense type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExpenseTypeResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  error:
                    type: string
tags:
  - name: Users
    description: Users path
  - name: Register
    description: registration description
  - name: Login
    description: login  description
  - name: Auth
    description : auth description
  - name: App
    description: app endpoints


components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: john_doe
          pattern: "^[a-zA-Z0-9_]+$"
        password:
          type: string
          example: secureP@ssword
          minLength: 6
        full_name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
      required:
        - username
        - password
        - full_name
        - email

    RegisterResponseData:
      type: object
      properties:
        username:
          type: string
          example: john_doe
        full_name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        password_changed_at:
          type: string
          format: date-time
          example: "2023-07-22T12:34:56Z"
        created_at:
          type: string
          format: date-time
          example: "2023-07-22T12:34:56Z"
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: john_doe
          pattern: "^[a-zA-Z0-9_]+$"
        password:
          type: string
          example: secureP@ssword
          minLength: 6
      required:
        - username
        - password

    LoginResponseData:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426655440000
        access_token:
          type: string
          example: kjsdbjbkjdsfbk.sdfkbkjsdbfkjkdjs.khdsbhbsd
        access_token_expires_at:
          type: string
          format: date-time
          example: "2023-07-23T12:34:56Z"
        refresh_token:
          type: string
          example: kjsdbjbkjdsfbk.sdfkbkjsdbfkjkdjs.khdsbhbsd
        refresh_token_expires_at:
          type: string
          format: date-time
          example: "2023-10-22T12:34:56Z"
        user:
          $ref: "#/components/schemas/RegisterResponseData"
    Response:
      type: object
      properties:
        message:
          type: string
        error:
          type: string

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
        # Add any other properties required for the RefreshTokenRequest if needed
      required:
        - refresh_token
      example:
        refresh_token: "kjsdbjbkjdsfbk.sdfkbkjsdbfkjkdjs.khdsbhbsd"

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: string
      required:
        - access_token
        - expires_in
      example:
        access_token: "new_access_token_here"
        expires_in: "202301023"

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: User logged out successfully.
        # Add any other properties required for the LogoutResponse if needed
      required:
        - message
      example:
        message: User logged out successfully.
    ExpenseTypeList:
      type: array
      items:
        type: object
        properties:
          expense_type_id:
            type: integer
            example: 1
          name:
            type: string
            example: Food
          description:
            type: string
            example: Expenses related to food

    CreateExpenseTypeRequest:
      type: object
      properties:
        name:
          type: string
          example: Food
        description:
          type: string
          example: Expenses related to food
      required:
        - name

    ExpenseTypeResponse:
      type: object
      properties:
        expense_type_id:
          type: integer
          example: 1
        name:
          type: string
          example: Food
        description:
          type: string
          example: Expenses related to food