// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: expense.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO "Expense" (
    "ExpenseID", "ExpenseTypeID", "Amount", "Description", "Created_At"
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING "ExpenseID", "ExpenseTypeID", "Amount", "Description", "Created_At"
`

type CreateExpenseParams struct {
	ExpenseID     int32            `json:"ExpenseID"`
	ExpenseTypeID pgtype.Int4      `json:"ExpenseTypeID"`
	Amount        pgtype.Int4      `json:"Amount"`
	Description   pgtype.Text      `json:"Description"`
	CreatedAt     pgtype.Timestamp `json:"Created_At"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.ExpenseID,
		arg.ExpenseTypeID,
		arg.Amount,
		arg.Description,
		arg.CreatedAt,
	)
	var i Expense
	err := row.Scan(
		&i.ExpenseID,
		&i.ExpenseTypeID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM "Expense"
WHERE "ExpenseID" = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, expenseid int32) error {
	_, err := q.db.Exec(ctx, deleteExpense, expenseid)
	return err
}

const getExpenseByID = `-- name: GetExpenseByID :one
SELECT "ExpenseID", "ExpenseTypeID", "Amount", "Description", "Created_At" FROM "Expense"
WHERE "ExpenseID" = $1
    LIMIT 1
`

func (q *Queries) GetExpenseByID(ctx context.Context, expenseid int32) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpenseByID, expenseid)
	var i Expense
	err := row.Scan(
		&i.ExpenseID,
		&i.ExpenseTypeID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT "ExpenseID", "ExpenseTypeID", "Amount", "Description", "Created_At" FROM "Expense"
ORDER BY "Created_At" DESC
`

func (q *Queries) ListExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.Query(ctx, listExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ExpenseID,
			&i.ExpenseTypeID,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE "Expense"
SET "ExpenseTypeID" = $2, "Amount" = $3, "Description" = $4, "Created_At" = $5
WHERE "ExpenseID" = $1
    RETURNING "ExpenseID", "ExpenseTypeID", "Amount", "Description", "Created_At"
`

type UpdateExpenseParams struct {
	ExpenseID     int32            `json:"ExpenseID"`
	ExpenseTypeID pgtype.Int4      `json:"ExpenseTypeID"`
	Amount        pgtype.Int4      `json:"Amount"`
	Description   pgtype.Text      `json:"Description"`
	CreatedAt     pgtype.Timestamp `json:"Created_At"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.ExpenseID,
		arg.ExpenseTypeID,
		arg.Amount,
		arg.Description,
		arg.CreatedAt,
	)
	var i Expense
	err := row.Scan(
		&i.ExpenseID,
		&i.ExpenseTypeID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
