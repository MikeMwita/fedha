// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: expense_type.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpenseType = `-- name: CreateExpenseType :one
INSERT INTO "ExpenseType" (
    "ExpenseTypeID", "Name", "Description"
) VALUES (
             $1, $2, $3
         )
    RETURNING "ExpenseTypeID", "Name", "Description"
`

type CreateExpenseTypeParams struct {
	ExpenseTypeID int32       `json:"ExpenseTypeID"`
	Name          pgtype.Text `json:"Name"`
	Description   pgtype.Text `json:"Description"`
}

func (q *Queries) CreateExpenseType(ctx context.Context, arg CreateExpenseTypeParams) (ExpenseType, error) {
	row := q.db.QueryRow(ctx, createExpenseType, arg.ExpenseTypeID, arg.Name, arg.Description)
	var i ExpenseType
	err := row.Scan(&i.ExpenseTypeID, &i.Name, &i.Description)
	return i, err
}

const deleteExpenseType = `-- name: DeleteExpenseType :exec
DELETE FROM "ExpenseType"
WHERE "ExpenseTypeID" = $1
`

func (q *Queries) DeleteExpenseType(ctx context.Context, expensetypeid int32) error {
	_, err := q.db.Exec(ctx, deleteExpenseType, expensetypeid)
	return err
}

const getExpenseTypeByID = `-- name: GetExpenseTypeByID :one
SELECT "ExpenseTypeID", "Name", "Description" FROM "ExpenseType"
WHERE "ExpenseTypeID" = $1
    LIMIT 1
`

func (q *Queries) GetExpenseTypeByID(ctx context.Context, expensetypeid int32) (ExpenseType, error) {
	row := q.db.QueryRow(ctx, getExpenseTypeByID, expensetypeid)
	var i ExpenseType
	err := row.Scan(&i.ExpenseTypeID, &i.Name, &i.Description)
	return i, err
}

const listExpenseTypes = `-- name: ListExpenseTypes :many
SELECT "ExpenseTypeID", "Name", "Description" FROM "ExpenseType"
ORDER BY "Name"
`

func (q *Queries) ListExpenseTypes(ctx context.Context) ([]ExpenseType, error) {
	rows, err := q.db.Query(ctx, listExpenseTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExpenseType{}
	for rows.Next() {
		var i ExpenseType
		if err := rows.Scan(&i.ExpenseTypeID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenseType = `-- name: UpdateExpenseType :one
UPDATE "ExpenseType"
SET "Name" = $2, "Description" = $3
WHERE "ExpenseTypeID" = $1
    RETURNING "ExpenseTypeID", "Name", "Description"
`

type UpdateExpenseTypeParams struct {
	ExpenseTypeID int32       `json:"ExpenseTypeID"`
	Name          pgtype.Text `json:"Name"`
	Description   pgtype.Text `json:"Description"`
}

func (q *Queries) UpdateExpenseType(ctx context.Context, arg UpdateExpenseTypeParams) (ExpenseType, error) {
	row := q.db.QueryRow(ctx, updateExpenseType, arg.ExpenseTypeID, arg.Name, arg.Description)
	var i ExpenseType
	err := row.Scan(&i.ExpenseTypeID, &i.Name, &i.Description)
	return i, err
}
