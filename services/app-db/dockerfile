# Initial stage: download modules
FROM golang:1.18-alpine as golang-builder

RUN apk add build-base
RUN apk --update add git ca-certificates
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64;


FROM golang-builder AS app-builder
WORKDIR /app/db

# Copy go mod files
COPY go.mod go.sum \
     /app/db/

RUN go mod download

COPY .  /app/db

RUN go build -o /tmp/app-db

FROM app-builder AS prepare-bin

COPY --from=app-builder /tmp/app-db /usr/bin/database-service

# PostgreSQL Setup
FROM postgres:latest

# Set environment variables for PostgreSQL
ENV POSTGRES_USER=myuser
ENV POSTGRES_PASSWORD=mypassword
ENV POSTGRES_DB=mydatabase

# Copy the built binary from the previous stage into the PostgreSQL container
COPY --from=prepare-bin /usr/bin/database-service /usr/bin/database-service

# Create a directory to store SQL initialization scripts
RUN mkdir -p /docker-entrypoint-initdb.d

# Copy your SQL initialization script(s) from the build context to the container
COPY init.sql /docker-entrypoint-initdb.d/

# Expose PostgreSQL port (if needed)
EXPOSE 5432

# Set the entry point for the PostgreSQL container
ENTRYPOINT ["docker-entrypoint.sh"]

# Command to start PostgreSQL (use -c option to pass configuration parameters)
CMD ["postgres"]
